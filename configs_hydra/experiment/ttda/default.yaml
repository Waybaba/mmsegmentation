# @package _global_

defaults:
  - override /model: segformer_b0.yaml
  - override /dataset: gta2cityscapes.yaml
  - _self_


### global_cfg
crop_size_list_: ??? # [512, 512] or [1024, 1024]
stride_list_: ???
gta_scale_list_: ???
crop_size:
  _args_:
  - ${crop_size_list_} # e.g. [1024, 1024]
  _target_: builtins.tuple
city_scale:
  _args_:
  - [1024, 512]
  _target_: builtins.tuple
gta_scale:
  _args_:
  - ${gta_scale_list_} # [1280, 720] if crop_size==[512, 512], [2560, 1440] if crop_size==[1024, 1024]
  _target_: builtins.tuple


default_hooks:
  checkpoint:
    by_epoch: false
    interval: 16000
    type: CheckpointHook
  logger:
    interval: 10
    log_metric_by_epoch: false
    type: LoggerHook
  param_scheduler:
    type: ParamSchedulerHook
  sampler_seed:
    type: DistSamplerSeedHook
  timer:
    type: IterTimerHook
  visualization:
    type: SegVisualizationHook
    draw: ??? # true
    interval: ??? # draw seg figure

custom_hooks:
  # - ${ttda_hook} # ! change ttda_hook.xxx so that could be logged in wandb
  - type: TTDABeforeRunInitHook

dataset: 
  train_dataloader: # ! to dataset?
    batch_size: 1
    num_workers: 4
  val_dataloader:
    batch_size: 1
    num_workers: 4
  test_dataloader:
    batch_size: 1
    num_workers: 4

param_scheduler:
  - begin: 0
    by_epoch: false
    end: 160000
    eta_min: 0.0001
    power: 0.9
    type: PolyLR

optim_wrapper:
  type: OptimWrapper
  optimizer:
    betas:
      _args_:
      - [0.9, 0.999]
      _target_: builtins.tuple
    lr: 6.0e-05
    type: AdamW
    weight_decay: 0.01
  paramwise_cfg:
    custom_keys:
      pos_block: # this one is from mmseg
        decay_mult: 0.0
      .norm: # ! since we can not have . in name
        lr_mult: ${norm_lr_mult} # ! how to decide order?
      head:
        lr_mult: 0.0
      back:
        lr_mult: 0.0 # does not train backbone
      token_prompt:
        lr_mult: 0.0
      tpt_gates: 
        lr_mult: 0.0
      visual_prompt_module:
        lr_mult: 0.0
      fusion_conv:
        lr_mult: 0.0

norm_lr_mult: 1.0




test_cfg:
  type: TestLoopWrapper
  slide_adapt: ???
  adapt_img_vis_freq: ??? # for adapt, can see the proto for learning
  pseudo_label:
    turn_on: true
    type: ema # ori, cur, ema # remember to turn on ema
  high_conf_mask:
    turn_on: ???
    metric: confidence # confidence, uncertainty
    class_specific: true # mask globally or class-specific
    use_history: false # TODO change to float
    top_p: 0.5 # only keep top_p pixels, others set to 255
  proto_predict:
    turn_on: ???
    rho: count # for updating prototype, history_proto = (1-rho) * history_proto + rho * proto_this_img
    lambda_: 0.0 # for using prototype, final_proto = lambda_ * history_proto + (1 - lambda_) * proto_this_img. if "count", use count as lambda
    # norm_feats: true
    debug_feats: "prob" # feats, logits, prob
    norm_feats_mean: true
    norm_feats_sim: true
    proto_mask_top_p: 0.9 # 
    proto_mask_metric: "entropy" # confidence, entropy, ground_truth, none
    proto_mask_use_history: false # whether top_p threshold is based on all history metric or only this img 
  sam_predict: # predict with sam
    turn_on: ???
    tau: 1.0 # temperature for sam feats pseudo weights
    type: logits_mask_adjust # logits_mask_adjust, sam_feats_proto
    use_prob: true
    sam_ratio: 1.0 # 0.0 means no sam
    sam_ratio_mul_conf: true # whether add confidence to sam feats
    sam_ratio_conf_adjust: 1.0 # 0.0 all one, 1.0 linear, 100.0 all zero
  sam_model: # use sam online predict mask
    turn_on: false
    model: 
      # _target_: sam.scripts.pure_model.SegmentAnythingModelWrapper
      # _partial_: true
      # model_type: vit_b
      # checkpoint: ${oc.env:UDATADIR}/models/seg_models/segment_anything/sam_vit_b_01ec64.pth
      model_type: vit_h
      checkpoint: ${oc.env:UDATADIR}/models/seg_models/segment_anything/sam_vit_h_4b8939.pth
      device: ${device}
    sam:
      checkpoint: ${test_cfg.sam_model.model.checkpoint}
      model_type: ${test_cfg.sam_model.model.model_type}
    # mask_generator:
    #   _target_: sam.segment_anything.SamAutomaticMaskGenerator
    #   _partial_: true
  pseudo_label_loss:
    ratio: 0.0 # 0. or 1. to only adjust entropy loss
    conf_weight_tau: 1.0 # 0.0 all one, 1.0 linear, 100.0 all zero
    # mask_with: "ground_truth" # "pseudo_label" or "entropy" or "ground_truth"
    # mask_with_freeze: false
    # threshold: 0.9
    # target: "current" # "current" or "freeze"
    # class_balance: false
  entropy_loss:
    ratio: 0.0
    # mask_with: "entropy" # "pseudo_label", "entropy"
    # mask_with_freeze: false 
    # threshold: 0.1 # use as ratio if "class_balance" = true
    # class_balance: false
    tau: 0.0 # temperature for entropy loss # would increase the weight of confident ones
  sam_loss:
    ratio: 0.0
    strategy: "close_to_confident" # min_variance, close_to_confident
    confidence_type: "entropy" # "confidence", "entropy"
    confidence_selected_ratio: 0.1
  diverse_loss:
    ratio: 0.0
  ema:
    turn_on: true
    rho: 0.01 # how much would ema be updated each step
    cur_recover: false
    ema_pred: true
  debug:
    use_mmseg_pseudo_loss: ???

train_cfg:
  max_iters: 160000
  type: IterBasedTrainLoop
  val_interval: 16000
val_cfg:
  type: ValLoop

model:
  type: EncoderDecoderWrapper
  backbone:
    type: MixVisionTransformerTPT
    tpt_cfg:
      turn_on: false
      num_tokens: 10
      weight_init_type: normal # zero, normal, kv_normal, q_normal
      mode: llama # llama, vpt # TODO
    vpt_cfg:
      turn_on: false 
      type: cnn # "padding" # padding, fixed_patch, random_patch, cnn
      prompt_size: 3
      res_add: 1
      weight_init_type: normal # "normal" 
tta: true




## runtime
default_scope: mmseg
env_cfg:
  cudnn_benchmark: true
  dist_cfg:
    backend: nccl
  mp_cfg:
    mp_start_method: fork
    opencv_num_threads: 0
load_from: ???
log_level: INFO
log_processor:
  by_epoch: false
resume: false
tta_model:
  type: SegTTAModel
visualizer:
  name: visualizer
  type: SegLocalVisualizer
  vis_backends:
  - type: LocalVisBackend
  - init_kwargs:
      mode: ${wandb.mode}
      project: ${task_name}
      entity: ${oc.env:WANDB_ENTITY}
      tags: ${tags}
    type: WandbVisBackend


train: false
test: true
tags: [ttda_debug]
task_name: MMSEG